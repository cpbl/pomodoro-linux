#!/usr/bin/python
"""
Usage:
  pomodoro [options] [<minutes>]
  pomodoro [options] analyse 
  pomodoro [options] analyze

Options:
  -h --help                      Show this screen.
  -n --with-network              Use this to keep the network active during the tomato
  --player=<musicplayer>         Set this to banshee or rythmbox to pause music (or leave it to try both)
  -l LOGFILE --logfile=LOGFILE   TSV file to store list of tomato sessions 
                                   [default: ~/pomodoro-log.txt]
  -e EDITOR --editor=EDITOR      Editor to use for reporting tags [default: emacs]

 This is a simple, customisable "Pomodoro Method" or "Tomato method" timer for facilitating high-focus work. 
 It turns off your music and network for work periods, traditionally for 25 minutes at a time, and suggests a five minute break in between the work sessions.
 Completed sessions are logged in a flexible, text-based log so you can do whatever you want (or nothing) with them. Whenever you finish a pomodoro, you can list any relevant tags to describe your work.

 It runs some custom command line strings at the beginning and end of each tomato, for instance to block access to certain websites by interfering with /etc/hosts.
 With the current settings, these sites are only unblocked at the end of the tomato, if the time is not during the 09h-17h workday. )

 It also works with one of a couple of music players on GNU/Linux so that any music that's playing when you start is paused and continues after you've logged your session.

The "analyse" mode makes wordclouds, statistics, time plots...

 Here's example output (There are also GUI notifications through the DE):

Found alive music player(s): ['rhythmbox', 'banshee']
   Pausing playing music player(s): ['rhythmbox']
Starting Pomodoro for 25 minutes at Fri Jul  1 17:42:42 EDT 2016 ...
Enter any tags and quit emacs...
Starting 5 minutes break at Fri Jul  1 18:08:12 EDT 2016 ...
Finished break.   Restart me for another work cycle.

Dependencies (Ubuntu package names): python-docopt, python-pandas,  notify-osd, banshee, rhythmbox, 
Dependencies (pip names, e.g. use "pip install --user --upgrade wordcloud"):  wordcloud
"""
__author__='cpbl but who would want to admit it?'
import docopt,os,sys,datetime,subprocess,re
import commands # Linux 
import pandas as pd
import matplotlib.pyplot as plt

musicPlayerKnowhow=dict(
    banshee=dict(pause='banshee --pause',
                 resume='banshee --play'),
    rhythmbox=dict(pause='rhythmbox-client --pause',
                   resume='rhythmbox-client --play')
    )

def linux_musicplayer_check_whether_playing():
    """
    Report which applications are currently sending sound to the mixer,
    based on the output of the command:

       pacmd list-sink-inputs

    Also list those which are running/connected, but not currently sending sound.
    Returns a dict listing applications and a boolean playing state.

    This is very GNU/Linux specific! At least, it works on Ubuntu.  On other platforms, there may be direct ways for each application.

    For instance, under Ubuntu, you can ask banshee:

    'playing' in commands.getstatusoutput("banshee --query-current-state")[1])

    but there's nothing like this for rhythmbox

    """
    outs=commands.getstatusoutput(    'pacmd list-sink-inputs')[1].split('index: ')[1:]
    found={}
    outs= commands.getstatusoutput("pacmd list-sink-inputs |grep -e index: -e state: -e client:")[1].split('index:')
    for cl in outs[1:]:
        found[ re.findall('<(.*?)>',cl.split(':')[2])[0].lower() ]  =  'RUNNING' in cl.split(':')[1]
    return(found)



def start_session(arguments):
    workMinutes= arguments['<minutes>'] or '25'  # Implements default value for a positional argument in docopts
    LOGFILE=arguments['--logfile']
    EDITOR=arguments['--editor']
    networking=arguments['--with-network']
    musicPlayer=arguments['--player']
    BLOCK_WEB_SITES,  UNBLOCK_WEB_SITES='',''
    if os.path.exists('/home/local/etc/hosts-focus'):
        BLOCK_WEB_SITES='cp /home/local/etc/hosts-focus /etc/hosts'
        UNBLOCK_WEB_SITES='cp /home/local/etc/hosts-lax /etc/hosts'
    
    #if workMinutes is None:
    #    workMinutes =25
    workMinutes =int(workMinutes)
    os.system("""
    nmcli networking off
    echo "Networking off."
    """*(not networking)+"""
    notify-send "Starting Pomodoro for $workMinutes minutes at `date`.   Networking """+{True:'left on',False:'off'}[networking]+"""."

    """+BLOCK_WEB_SITES+"""

    """)

    # We will mute all sound. But it's nicer, if we can, to pause music where it was:
    musicPlayers=['rhythmbox','banshee'] if musicPlayer is None else [musicPlayer]
    musicPlayers= [mp for mp in musicPlayers if commands.getstatusoutput('echo $(pidof '+mp+')')[1]]
    print('Found alive music player(s): '+(str(musicPlayers) if musicPlayers else 'None'))
    # Now eliminate those that are not actually playing (ie sending sound to the mixer):
    musicPlayers= [mp for mp in musicPlayers if linux_musicplayer_check_whether_playing().get(mp)]
    print('   Currently playing music player(s): '+(str(musicPlayers) if musicPlayers else 'None'))    
    # Now pause those that we know how to pause:
    for mp in musicPlayers:
        if mp in musicPlayerKnowhow:
            print('   Pausing '+mp+'.')
            os.system(musicPlayerKnowhow[mp]['pause'])

    os.system('touch '+LOGFILE) # Ensure that it exists
    os.system('echo "Starting Pomodoro for '+str(workMinutes)+' minutes at `date` ..."')
    hour=datetime.datetime.now().hour
    weekend=datetime.datetime.weekday(datetime.datetime.now())>4
    shdo="""
    # Regardless of pausing play, mute all sounds:
    amixer -q -D pulse sset Master mute
    sleep $((60*"""+str(workMinutes)+"""))
    notify-send "Break!"
    """+ (not networking)* """ 
    nmcli networking on 
    echo "      Networking on!"
    """+         """

    H=$(date +%H)
    """+ (hour<9 or hour>=17 or weekend )*UNBLOCK_WEB_SITES +"""

    # In-place edit: add a line to the beginning of the file
    sed -i -e "1i`date`	"""+str(workMinutes)+"""	"'\' """+LOGFILE+"""
    echo "Enter any tags and quit """+EDITOR+"""..."
     """+EDITOR+" "+LOGFILE+"""
    # Add a newline, and remove any double new lines:
    echo >> """+LOGFILE+"""
    # In-place edit: remove double newlines
    sed -i '/^[ \t]*$/d' """+LOGFILE+""" 
    # Regardless of restarting play, un-mute all sounds:
    amixer -q -D pulse sset Master unmute
    echo "Starting 5 minutes break at `date` ..."
    """
    # Now un-pause those that we believe were playing:
    for mp in musicPlayers:
        if mp in musicPlayerKnowhow:
            shdo+='echo "  Resuming '+mp+'"\n'
            shdo+=musicPlayerKnowhow[mp]['resume']

    shdo+="""
    sleep 300 && notify-send "Start a new work cycle!"
    echo "Finished break.   Restart me for another work cycle."
    """
    #print(shdo)
    os.system(shdo)

def get_pid(process_name, contains=True):
    """ Quasi-cross platform way to find if something is running."""
    ffff=sorted([ss.name() for ss in psutil.process_iter()])
    print ffff
    fuck
    for proc in psutil.process_iter():
        if 'ansh' in proc.name(): print proc.name() 
        if proc.name() == process_name or contains* (process_name.lower() in proc.name().lower()):
            return(proc)
    
def analyse_log(logfile):
    df=pd.read_table(logfile, names=['start','minutes','tags'])
    tags=[ss.strip() for ss in  df.tags.str.split(',').sum()]

    # Frequency of tags
    import collections
    counter=collections.Counter(tags)
    print(' Most frequently tagged: ')
    print('\n'.join(['%30s:\t%d'%(a,b) for a,b in counter.most_common(45)]))

    # Work over time: (minutes per day)
    df['dt']=pd.to_datetime(df.start)
    """
    df.dt.dt.month
    df.dt.dt.year
    dt.snap #??
    """
    if 0:
        # Day resolution?
        df['day'] = df.dt.dt.round('d')
        byday=df.groupby('day')['minutes'].sum()
        byday.plot()
        plt.ylabel('Minutes')
        plt.show()


        def roundTime(dt=None, dateDelta=datetime.timedelta(minutes=1)):
            """Round a datetime object to a multiple of a timedelta
            dt : datetime.datetime object, default now.
            dateDelta : timedelta object, we round to a multiple of this, default 1 minute.
            Author: Thierry Husson 2012 - Use it as you want but don't blame me.
                    Stijn Nevens 2014 - Changed to use only datetime objects as variables
            """
            roundTo = dateDelta.total_seconds()

            if dt == None : dt = datetime.datetime.now()
            ever=dt-dt.min
            seconds = ever.seconds
            foo
            # // is a floor division, not a comment on following line:
            rounding = (seconds+roundTo/2) // roundTo * roundTo
            return dt + datetime.timedelta(0,rounding-seconds,-dt.microsecond)
        def roundTime(tm, freq):
            if freq == 'month':
                nt = datetime.datetime(year=tm.year, month=tm.month, day=1)
            elif freq == 'day':
                nt = datetime.datetime(year=tm.year, month=tm.month, day=tm.day)
            else:
                not_done_yet
            return nt

        plt.figure()
        df['month']=df.dt.map(lambda tt: roundTime(tt,'month'))
        bymonth=df.groupby('month')['minutes'].sum()
        bymonth.plot(kind='bar')
        plt.ylabel('minutes')
        plt.show()


        ax=plt.twinx()
        df['day']=df.dt.map(lambda tt: roundTime(tt,'day'))
        byday=df.groupby('day')['minutes'].sum()
        byday.plot(kind='bar', ax=ax)
        plt.ylabel('minutes')
        plt.show()

    

    if 0:
        bymonth=df.groupby('day')['minutes'].sum()
        bymonth.plot()
        plt.ylabel('Minutes')
        plt.show()
    
    # Plot some word clouds:
    from wordcloud import WordCloud
    wordcloud = WordCloud().generate('. '.join(tags))
    plt.figure()    
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.show()

    # lower max_font_size
    wordcloud = WordCloud(max_font_size=40).generate('. '.join(tags))
    plt.figure()
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.show()


################################################################################################
################################################################################################
################################################################################################
if __name__ == '__main__':
################################################################################################
################################################################################################
################################################################################################
# Docopt is a library for parsing command line arguments
    arguments = docopt.docopt(__doc__)
    workMinutes= arguments['<minutes>']
    import psutil
    print('         Use "pomodoro -h" for usage info / help')
    if workMinutes in ['analyse','analyze'] or arguments['analyse'] or arguments['analyze']:
        analyse_log(arguments['--logfile'])
    else:
        start_session(arguments)
    pass

